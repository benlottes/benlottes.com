{"ast":null,"code":"var _jsxFileName = \"/root/benlottes.com/benlottes-react-app/src/my_components/Projects.js\";\nimport React from 'react';\nimport ProjectPane from './ProjectPane';\nimport CenterView from 'react-bootstrap/Container';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Projects extends React.Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(CenterView, {\n      name: \"Projects\",\n      className: \"projects\",\n      children: [/*#__PURE__*/_jsxDEV(ProjectPane, {\n        name: \"Notes\",\n        image_path: require(\"./../resources/Note_App.png\"),\n        url: \"/Notes/login\",\n        children: \"With this project, I was looking to expose myself to the process of creating a full-stack web app. I selected the MERN stack because I wanted to expose myself to a NO-SQL database, as well as react, having heard how modular and intuitive it is. In the future, I first hope to improve the app by implementing client side encryption. I also want to rework the architecture of the components, at the moment there are a lot of screen refreshes when updating the notes. I also think the layout could be improved by structuring the CSS better so that the components don't move around so much.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ProjectPane, {\n        name: \"Pennyworth\",\n        image_path: require(\"./../resources/PennyWorth.png\"),\n        url: \"https://github.com/benlottes/BudgetTracker\",\n        children: \"In my software engineering class, a group of my classmates and I decided to create a budgeting app. We decided to write the application in Java and used the JavaFX library for the GUI. Writing this piece of software in Java helped me learn a lot about the design priciples of Object Oriented Programming; while I knew the basics of OOP, I had never fully fleshed out an application like this one. Overall ,I think the app turned out well, though the efficiency of churning data and plotting the graphs could be improved. I also wish we had the time to improve upon the spending categories, as their implementation is rigid.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Projects;","map":{"version":3,"names":["React","ProjectPane","CenterView","Projects","Component","render","require"],"sources":["/root/benlottes.com/benlottes-react-app/src/my_components/Projects.js"],"sourcesContent":["import React from 'react'\nimport ProjectPane from './ProjectPane'\nimport CenterView from 'react-bootstrap/Container'\n\nclass Projects extends React.Component{\n    render(){\n        return (\n            <CenterView name=\"Projects\" className=\"projects\">\n                <ProjectPane name=\"Notes\" \n                             image_path={require(\"./../resources/Note_App.png\")} \n                             url=\"/Notes/login\"> \n                             With this project, I was looking to expose myself to the process \n                             of creating a full-stack web app. I selected the MERN stack because\n                             I wanted to expose myself to a NO-SQL database, as well as react,\n                             having heard how modular and intuitive it is. In the future, I first\n                             hope to improve the app by implementing client side encryption. I\n                             also want to rework the architecture of the components, at the moment \n                             there are a lot of screen refreshes when updating the notes. I also\n                             think the layout could be improved by structuring the CSS better so \n                             that the components don't move around so much.\n                </ProjectPane>\n                <ProjectPane name=\"Pennyworth\" \n                             image_path={require(\"./../resources/PennyWorth.png\")} \n                             url=\"https://github.com/benlottes/BudgetTracker\"> \n                             In my software engineering class, a group of my classmates and I\n                             decided to create a budgeting app. We decided to write the application \n                             in Java and used the JavaFX library for the GUI. Writing this piece of \n                             software in Java helped me learn a lot about the design priciples of\n                             Object Oriented Programming; while I knew the basics of OOP, I had never\n                             fully fleshed out an application like this one. Overall ,I think the app \n                             turned out well, though the efficiency of churning data and plotting the \n                             graphs could be improved. I also wish we had the time to improve upon the \n                             spending categories, as their implementation is rigid.\n                </ProjectPane>\n            </CenterView>\n        )\n    }\n}\n\nexport default Projects"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,UAAP,MAAuB,2BAAvB;;;AAEA,MAAMC,QAAN,SAAuBH,KAAK,CAACI,SAA7B,CAAsC;EAClCC,MAAM,GAAE;IACJ,oBACI,QAAC,UAAD;MAAY,IAAI,EAAC,UAAjB;MAA4B,SAAS,EAAC,UAAtC;MAAA,wBACI,QAAC,WAAD;QAAa,IAAI,EAAC,OAAlB;QACa,UAAU,EAAEC,OAAO,CAAC,6BAAD,CADhC;QAEa,GAAG,EAAC,cAFjB;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADJ,eAcI,QAAC,WAAD;QAAa,IAAI,EAAC,YAAlB;QACa,UAAU,EAAEA,OAAO,CAAC,+BAAD,CADhC;QAEa,GAAG,EAAC,4CAFjB;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAdJ;IAAA;MAAA;MAAA;MAAA;IAAA,QADJ;EA8BH;;AAhCiC;;AAmCtC,eAAeH,QAAf"},"metadata":{},"sourceType":"module"}